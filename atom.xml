<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-25T13:02:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lulu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo搭建github博客</title>
    <link href="http://yoursite.com/2017/08/23/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/08/23/用hexo搭建github博客/</id>
    <published>2017-08-23T06:51:27.000Z</published>
    <updated>2018-07-25T13:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><footer><strong>什么是Hexo</strong><cite><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a></cite></footer></blockquote><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>Node.js</li><li>Git<br>node.js建议用nvm进行管理，可以根据不同需要切换所需的node版本。<br>如果已经安装好上述环境，就可以进行hexo安装啦。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装Hexo完成后，执行以下命令初始化工程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h3><p>配置文件<code>_config.yml</code>中可以配置网站信息</p><ul><li>更改<em>site</em>下的内容配置title、author等基本信息。</li><li>更改<em>deploy</em>下内容当执行命令<code>hexo deploy</code>时实现自动部署到github仓库中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/some/some.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>package.json中应该有默认的依赖，直接执行命令下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="创建新博文"><a href="#创建新博文" class="headerlink" title="创建新博文"></a>创建新博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] <span class="string">"postName"</span> <span class="comment">#新建博文</span></span><br></pre></td></tr></table></figure><p>scaffolds文件夹中为新建文章的模板，默认有draft、page、post三种，新建博文时更改参数layout为模板类型即可。</p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><p>启动服务器，可以在本地4000端口预览网站效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成html、css、js等静态资源到public文件夹，deploy时将静态资源部署到github中</p><h3 id="部署到Git"><a href="#部署到Git" class="headerlink" title="部署到Git"></a>部署到Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>配置文件设置好git值后即可命令行一键部署！</p><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>本站点使用<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT</a>主题，详细的配置信息戳链接进入官方文档即可看到。</p><h3 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &lt;hexo目录&gt;</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h3><p>修改站点配置文件<code>_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><h2 id="搭建GitHub博客"><a href="#搭建GitHub博客" class="headerlink" title="搭建GitHub博客"></a>搭建GitHub博客</h2><blockquote><p>GitHub Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p><footer><strong>阮一峰</strong></footer></blockquote><p>用<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>搭建博客只需要以下几步：</p><ul><li>创建一个仓库，以<code>username.github.io</code>命名（username必须与你GitHub的用户名一致）</li><li>将Hexo站点配置文件的git仓库地址改为username.github.io仓库地址</li><li>写好博文，<code>hexo generate</code>生成静态资源，<code>hexo deploy</code>部署到git仓库</li><li>访问 <code>https://username.github.io/</code></li></ul><p>你的专属博客就展现在你面前啦！</p><p>参考文档：<br><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT</a><br><a href="https://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="noopener">Jekyll迁移到Hexo搭建个人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;什么是Hexo&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 与 flow</title>
    <link href="http://yoursite.com/2017/05/30/TypeScript-%E4%B8%8E-flow/"/>
    <id>http://yoursite.com/2017/05/30/TypeScript-与-flow/</id>
    <published>2017-05-30T07:18:16.000Z</published>
    <updated>2018-07-25T13:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>flow： 一个 JAVASCRIPT 静态类型检测器<br>TypeScript: 是Javascript类型的超集，它可以编译成纯JavaScript</p></blockquote><p>最近看vue源码发现一些不认识的语法，查了一下才发现是flow，很不好意思的说最近才去了解了ts和flow。正好有时间整理成这篇博客</p><h2 id="了解TypeScript和flow"><a href="#了解TypeScript和flow" class="headerlink" title="了解TypeScript和flow"></a>了解TypeScript和flow</h2><p>这是它们官网给出的定义</p><h3 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h3><p>来自facebook</p><ul><li>类型接口 : Flow 使用类型接口查找错误，甚至不需要任何类型声明。 它也能够准确地跟踪变量的类型，就像运行时那样。</li><li>JS 风格 : Flow 专为 JavaScript 程序员设计。 他能够理解常用 JS 方言和极具动态的特性</li><li>实时反馈 : Flow 能立刻检测代码变化，在开发 JS 时提供快速不断地反馈</li></ul><p>本人认为第三点是flow与ts较大区别的地方，同时迁入/迁出本低（’可以一个文件一个文件地迁移，不需要一竿子全弄了’）</p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>来自微软</p><ul><li>始于JavaScript，归于JavaScript</li><li>强大的工具构建 大型应用程序 : 类型允许JavaScript开发者在开发JavaScript应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</li><li>先进的 JavaScript : TypeScript提供最新的和不断发展的JavaScript特性，包括那些来自2015年的ECMAScript和未来的提案中的特性，比如异步功能和Decorators，以帮助建立健壮的组件。</li></ul><p>本人觉得第二点说明了ts比较适合的使用场景：大型应用、代码重构。</p><h2 id="TypeScript-vs-flow"><a href="#TypeScript-vs-flow" class="headerlink" title="TypeScript vs flow"></a>TypeScript vs flow</h2><p>强烈推荐<a href="http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html#/45" target="_blank" rel="noopener">Flow vs TypeScript</a>这篇文章，有很详细的对比<br>vue中使用了flow，flow的适合场景可以参考尤大的回答<a href="https://www.zhihu.com/question/46397274" target="_blank" rel="noopener">Vue 2.0 为什么选用 Flow 进行静态代码检查而不是直接使用 TypeScript？</a></p><h2 id="是否使用TypeScript-flow"><a href="#是否使用TypeScript-flow" class="headerlink" title="是否使用TypeScript/flow"></a>是否使用TypeScript/flow</h2><p>虽然TypeScript/flow都是基于js的，但他们的类型机制还是需要花费成本学习（类、接口），并非适用任何项目，这是Flow vs TypeScript推荐的参考标准，可以参照下<br><img src="../images/ts_flow.png" alt=""></p><p>参考文档：<br><a href="http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html#/" target="_blank" rel="noopener">Flow vs TypeScript</a><br><a href="https://www.tslang.cn/" target="_blank" rel="noopener">TypeScript中文网</a><br><a href="https://zhenyong.github.io/flowtype/" target="_blank" rel="noopener">flow中文翻译文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;flow： 一个 JAVASCRIPT 静态类型检测器&lt;br&gt;TypeScript: 是Javascript类型的超集，它可以编译成纯JavaScript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近看vue源码发现一些不认识的语法，查了一下才发现
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="flow" scheme="http://yoursite.com/tags/flow/"/>
    
  </entry>
  
</feed>
